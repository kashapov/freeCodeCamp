{"version":3,"sources":["reducers/quotesReducer.js","reducers/index.js","constants/index.js","store.js","components/Loading.js","actions/index.js","components/Quote.js","components/App.js","index.js"],"names":["initialState","loading","error","data","randomNumber","colors","combineReducers","quotes","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","Loading","react_default","a","createElement","Component","fetchQuotes","dispatch","apiUrl","fetch","then","response","ok","Error","concat","status","json","catch","console","log","newQuote","randomNum","Quote","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNewQuote","bind","assertThisInitialized","props","randomQuoteIndex","Math","floor","random","components_Loading","_this$props$quotes$th","quote","author","randomColor","className","style","backgroundColor","id","color","href","title","target","rel","onClick","connect","bindActionCreators","App","es","src_components_Quote","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5e0d24fd.chunk.js","sourcesContent":["import { FETCH_QUOTES, NEW_QUOTE } from \"../constants\";\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  error: false,\r\n  data: [],\r\n  randomNumber: \"\",\r\n  colors: [\r\n    \"#16a085\",\r\n    \"#27ae60\",\r\n    \"#2c3e50\",\r\n    \"#f39c12\",\r\n    \"#e74c3c\",\r\n    \"#9b59b6\",\r\n    \"#FB6964\",\r\n    \"#342224\",\r\n    \"#472E32\",\r\n    \"#BDBB99\",\r\n    \"#77B1A9\",\r\n    \"#73A857\"\r\n  ]\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_QUOTES:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload\r\n      };\r\n    case NEW_QUOTE:\r\n      return {\r\n        ...state,\r\n        randomNumber: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport quotesReducer from \"./quotesReducer\";\r\n\r\nexport default combineReducers({\r\n  quotes: quotesReducer\r\n});\r\n","export const FETCH_QUOTES = \"FETCH_QUOTES\";\r\nexport const NEW_QUOTE = \"NEW_QUOTE\";\r\n","import thunk from \"redux-thunk\";\r\nimport { applyMiddleware, createStore, compose } from \"redux\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Loading extends Component {\r\n  render() {\r\n    return <div>Loading...</div>;\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import { FETCH_QUOTES, NEW_QUOTE } from \"../constants\";\r\n\r\nexport const fetchQuotes = () => dispatch => {\r\n  const apiUrl =\r\n    \"https://raw.githubusercontent.com/kashapov/freeCodeCamp/Random-Quote-Machine/random-quote-machine/src/utils/quotes.json\";\r\n\r\n  fetch(apiUrl)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Could not fetch ${apiUrl}, received ${response.status}`\r\n        );\r\n      }\r\n\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      dispatch({ type: FETCH_QUOTES, payload: data.quotes });\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nexport const newQuote = randomNum => {\r\n  return {\r\n    type: NEW_QUOTE,\r\n    payload: randomNum\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Loading from \"./Loading\";\r\nimport { fetchQuotes, newQuote } from \"../actions/index\";\r\n\r\nimport \"./Quote.css\";\r\n\r\nclass Quote extends Component {\r\n  constructor() {\r\n    super();\r\n    this.getNewQuote = this.getNewQuote.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchQuotes();\r\n    this.getNewQuote();\r\n  }\r\n\r\n  getNewQuote() {\r\n    let randomQuoteIndex = Math.floor(Math.random() * 102);\r\n    this.props.newQuote(randomQuoteIndex);\r\n  }\r\n  render() {\r\n    if (this.props.loading) {\r\n      return <Loading />;\r\n    }\r\n    const { quote, author } = this.props.quotes[this.props.randomNumber];\r\n    const randomColor = this.props.randomColor[Math.floor(Math.random() * 11)];\r\n    return (\r\n      <div className=\"wrapper\" style={{ backgroundColor: randomColor }}>\r\n        <div id=\"quote-box\">\r\n          <div className=\"quote-text\">\r\n            <i className=\"fa fa-quote-left\"> </i>\r\n            <q id=\"text\" style={{ color: randomColor }}>\r\n              {quote}\r\n            </q>\r\n          </div>\r\n          <div className=\"quote-author\" style={{ color: randomColor }}>\r\n            -<span id=\"author\"> {author}</span>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <a\r\n              href={\r\n                'https://twitter.com/intent/tweet?hashtags=quotes,freecodecamp&related=freecodecamp&text=\"' +\r\n                quote +\r\n                '\" %0D%0A- ' +\r\n                author +\r\n                \"%0D%0A\"\r\n              }\r\n              className=\"button\"\r\n              id=\"tweet-quote\"\r\n              title=\"Tweet this quote!\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              style={{ backgroundColor: randomColor }}\r\n            >\r\n              TWEET\r\n            </a>\r\n            <button\r\n              className=\"button\"\r\n              id=\"new-quote\"\r\n              onClick={this.getNewQuote}\r\n              style={{ backgroundColor: randomColor }}\r\n            >\r\n              NEW QUOTE\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  quotes: state.quotes.data,\r\n  randomNumber: state.quotes.randomNumber,\r\n  loading: state.quotes.loading,\r\n  randomColor: state.quotes.colors\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return bindActionCreators(\r\n    {\r\n      fetchQuotes,\r\n      newQuote\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Quote);\r\n","import React, { Component } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../store\";\r\nimport Quote from \"./Quote\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Quote />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}