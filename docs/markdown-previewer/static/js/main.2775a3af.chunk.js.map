{"version":3,"sources":["AppStore.js","components/Editor/Editor.js","components/Preview/Preview.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AppStore","state","editorContent","actions","changeEditorContent","newValue","_this","setState","fetch","response","this","text","props","children","React","Component","propsTypes","PropTypes","element","isRequired","Editor","handleChange","event","value","target","react_default","a","createElement","className","id","onChange","Preview","_ref","content","marked","dangerouslySetInnerHTML","__html","setOptions","gfm","tables","pedantic","sanitize","smartLists","smartypants","highlight","code","lang","language","prism","breaks","App","Preview_Preview","Object","assign","Editor_Editor_Editor","Boolean","window","location","hostname","match","ReactDOM","render","AppStore_AppStore","store","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAGqBA,6MACnBC,MAAQ,CACNC,cAAe,MAGjBC,QAAU,CACRC,oBAAqB,SAACC,GACpBC,EAAKC,SAAS,CAAEL,cAAeG,uNAKVG,MACrB,mFADIC,SAG2B,KAA7BC,KAAKT,MAAMC,2CACbQ,cAAqCD,EAASE,gCAA9BT,yBAAXK,6JAIA,IACCN,EAAmBS,KAAnBT,MAAOE,EAAYO,KAAZP,QACf,OAAOO,KAAKE,MAAMC,SAAS,CAAEZ,QAAOE,mBAtBFW,IAAMC,WA0B5Cf,EAASgB,WAAa,CACpBH,SAAUI,IAAUC,QAAQC,sBCzBTC,6MACnBC,aAAe,SAACC,GACd,IAAMC,EAAQD,EAAME,OAAOD,MAC3BjB,EAAKM,MAAMR,oBAAoBmB,4EAGxB,IACCrB,EAAkBQ,KAAKE,MAAvBV,cACR,OACEuB,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,YACEC,UAAU,mBACVC,GAAG,SACHN,MAAOrB,EACP4B,SAAUpB,KAAKW,uBAdWP,IAAMC,wCCkB3B,SAASgB,EAATC,GAAoC,IAAjB9B,EAAiB8B,EAAjB9B,cAC1B+B,EAAUC,IAAOhC,GACvB,OACEuB,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,qBAEFH,EAAAC,EAAAC,cAAA,WAASC,UAAU,qBACjBH,EAAAC,EAAAC,cAAA,OACEE,GAAG,UACHD,UAAU,yBACVO,wBAAyB,CAAEC,OAAQH,OAtB7CC,IAAOG,WAAW,CAChBC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,UAZgB,SAACC,EAAMC,GACvB,IAAMC,EAAWC,YAAgBF,IAASE,YAAA,GAC1C,OAAOA,YAAgBH,EAAME,IAW7BE,QAAQ,UCZK,SAASC,EAATlB,GAAiC,IAAlB/B,EAAkB+B,EAAlB/B,MAAOE,EAAW6B,EAAX7B,QACnC,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACwB,EAADC,OAAAC,OAAA,GAAapD,EAAWE,IACxBsB,EAAAC,EAAAC,cAAC2B,EAADF,OAAAC,OAAA,GAAYpD,EAAWE,MCDXoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OACPpC,EAAAC,EAAAC,cAACmC,EAAD,KAAW,SAACC,GAAD,OAAWtC,EAAAC,EAAAC,cAACqC,EAAQD,KAC/BE,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2775a3af.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class AppStore extends React.Component {\r\n  state = {\r\n    editorContent: '',\r\n  };\r\n\r\n  actions = {\r\n    changeEditorContent: (newValue) => {\r\n      this.setState({ editorContent: newValue });\r\n    },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await fetch(\r\n      'https://kashapov.github.io/freeCodeCamp/markdown-previewer/example.md'\r\n    );\r\n    if (this.state.editorContent === '') {\r\n      this.setState({ editorContent: await response.text() });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { state, actions } = this;\r\n    return this.props.children({ state, actions });\r\n  }\r\n}\r\n\r\nAppStore.propsTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Editor.css';\r\n\r\nexport default class Editor extends React.Component {\r\n  handleChange = (event) => {\r\n    const value = event.target.value;\r\n    this.props.changeEditorContent(value);\r\n  };\r\n\r\n  render() {\r\n    const { editorContent } = this.props;\r\n    return (\r\n      <section className=\"editor split\">\r\n        <textarea\r\n          className=\"editor__textarea\"\r\n          id=\"editor\"\r\n          value={editorContent}\r\n          onChange={this.handleChange}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nEditor.propTypes = {\r\n  editorContent: PropTypes.string.isRequired,\r\n  changeEditorContent: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport marked from 'marked';\r\nimport * as prism from 'prismjs';\r\n\r\nimport './Preview.css';\r\n\r\nconst highlight = (code, lang) => {\r\n  const language = prism.languages[lang] || prism.languages['js'];\r\n  return prism.highlight(code, language);\r\n};\r\n\r\nmarked.setOptions({\r\n  gfm: true,\r\n  tables: true,\r\n  pedantic: false,\r\n  sanitize: false,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  highlight,\r\n  breaks: true,\r\n});\r\n\r\nexport default function Preview({ editorContent }) {\r\n  const content = marked(editorContent);\r\n  return (\r\n    <section className=\"preview split\">\r\n      <header className=\"preview__heading\">\r\n        <h3 className=\"preview__title\">Document Preview</h3>\r\n      </header>\r\n      <article className=\"preview__document\">\r\n        <div\r\n          id=\"preview\"\r\n          className=\"preview__body markdown\"\r\n          dangerouslySetInnerHTML={{ __html: content }}\r\n        />\r\n      </article>\r\n    </section>\r\n  );\r\n}\r\n\r\nPreview.propTypes = {\r\n  editorContent: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Editor from '../Editor';\r\nimport Preview from '../Preview';\r\n\r\nimport './App.css'\r\n\r\nexport default function App({ state, actions }) {\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__layout\">\r\n        <Preview {...state} {...actions} />\r\n        <Editor {...state} {...actions} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  state: PropTypes.object.isRequired,\r\n  actions: PropTypes.object.isRequired,\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport AppStore from './AppStore';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './styles/index.css';\r\n\r\nReactDOM.render(\r\n  <AppStore>{(store) => <App {...store} />}</AppStore>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}